define(["require", "exports", "./events", "../../bind/bind"], function (require, exports, events_1, bind_1) {
    /**
     * Creates a new HTMLElement.prototype, assigns all properties of 'new target()' to it and returns it;
     */
    function createPrototype(target) {
        var proto = Object.create(HTMLElement.prototype);
        function g(p, k) {
            do {
                if (p.hasOwnProperty(k))
                    return p;
                else
                    p = (p.prototype || p.__proto__);
            } while (true);
        }
        for (var key in target.prototype) {
            Object.defineProperty(proto, key, Object.getOwnPropertyDescriptor(g(target.prototype, key), key));
        }
        /*
        let t = target;
        do {
            t = t.prototype || t.__proto__;
            Object.getOwnPropertyNames(t)
            .forEach(key => {
                Object.defineProperty(proto, key, Object.getOwnPropertyDescriptor(t, key));
            })
        } while(!!(t.prototype || t.__proto__))
        
        for(let key in target.prototype)
            proto[key] = target.prototype[key];
        */
        return proto;
    }
    exports.createPrototype = createPrototype;
    /**
     * Adds a function named 'key' to 'target', which is a function that calls 'cb' with given 'args'
     * and then calls the previous 'target[key]' if it was a function with 'args'.
     */
    function assignCallback(target, key, cb, args) {
        if (args === void 0) { args = []; }
        var original = target[key];
        target[key] = function () {
            cb.apply(this, args);
            typeof original === "function" ? original.apply(this, arguments) : '';
        };
    }
    exports.assignCallback = assignCallback;
    /**
     * Default 'createdCallback' for a Customelement. Appends the 'template' content to shadowroot, if !!template
     */
    function createdCallback(template, target) {
        var _this = this;
        target.call(this);
        if (!!template) {
            var shadow = this.createShadowRoot();
            var clone = document.importNode(template.content, true);
            shadow.appendChild(clone);
            var wc = window["WebComponents"];
            if (wc && wc.ShadowCSS)
                wc.ShadowCSS.shimStyling(template.content, target.selector, "");
            if (template.hasAttribute("lazy"))
                this.lazy = true;
            if (!this.lazy && !(this.parentComponent && this.parentComponent.lazy))
                bind_1.bindDom(shadow, [this]);
            else if (this.lazy) {
                var uncreated = [].filter.call(shadow.querySelectorAll("*"), function (element) { return element.nodeName.indexOf("-") > -1; });
                var id = this.eventBus.addEventListener(events_1.ComponentCreatedEvent, function (e) {
                    var index = uncreated.indexOf(e.data);
                    if (index > -1)
                        uncreated.splice(index, 1);
                    if (uncreated.length == 0) {
                        bind_1.bindDom(shadow, [_this]);
                        _this.eventBus.removeEventListener(events_1.ComponentCreatedEvent, id);
                        _this.eventBus.dispatch(new events_1.ComponentReadyEvent(_this));
                    }
                });
            }
            else if (this.parentComponent && this.parentComponent.lazy) {
                var id = this.parentComponent.eventBus.addEventListener(events_1.ComponentReadyEvent, function (e) {
                    bind_1.bindDom(shadow, [_this]);
                    _this.parentComponent.eventBus.removeEventListener(events_1.ComponentReadyEvent, id);
                });
            }
        }
        this.onCreated.forEach(function (method) {
            method.call(_this, _this);
        });
        this.created();
        if (this.parentComponent && this.parentComponent.lazy)
            this.parentComponent.eventBus.dispatch(new events_1.ComponentCreatedEvent(this));
    }
    exports.createdCallback = createdCallback;
    function attachedCallback() {
        var _this = this;
        this.onAttached.forEach(function (method) {
            method.call(_this, _this);
        });
        this.attached();
    }
    exports.attachedCallback = attachedCallback;
    function detachedCallback() {
        var _this = this;
        this.onDetached.forEach(function (method) {
            method.call(_this, _this);
        });
        this.detached();
    }
    exports.detachedCallback = detachedCallback;
});

//# sourceMappingURL=data:application/json;base64,