define(["require", "exports", "./events", "../../bind/bind"], function (require, exports, events_1, bind_1) {
    /**
     * Creates a new HTMLElement.prototype, assigns all properties of 'new target()' to it and returns it;
     */
    function createPrototype(target) {
        var proto = Object.create(HTMLElement.prototype);
        function g(p, k) {
            do {
                if (p.hasOwnProperty(k))
                    return p;
                else
                    p = (p.prototype || p.__proto__);
            } while (true);
        }
        for (var key in target.prototype) {
            Object.defineProperty(proto, key, Object.getOwnPropertyDescriptor(g(target.prototype, key), key));
        }
        /*
        let t = target;
        do {
            t = t.prototype || t.__proto__;
            Object.getOwnPropertyNames(t)
            .forEach(key => {
                Object.defineProperty(proto, key, Object.getOwnPropertyDescriptor(t, key));
            })
        } while(!!(t.prototype || t.__proto__))
        
        for(let key in target.prototype)
            proto[key] = target.prototype[key];
        */
        return proto;
    }
    exports.createPrototype = createPrototype;
    /**
     * Adds a function named 'key' to 'target', which is a function that calls 'cb' with given 'args'
     * and then calls the previous 'target[key]' if it was a function with 'args'.
     */
    function assignCallback(target, key, cb, args) {
        if (args === void 0) { args = []; }
        var original = target[key];
        target[key] = function () {
            cb.apply(this, args);
            typeof original === "function" ? original.apply(this, arguments) : '';
        };
    }
    exports.assignCallback = assignCallback;
    /**
     * Default 'createdCallback' for a Customelement. Appends the 'template' content to shadowroot, if !!template
     */
    function createdCallback(template, target) {
        var _this = this;
        target.call(this);
        templating: if (!!template) {
            var shadow = this.createShadowRoot();
            var clone = document.importNode(template.content, true);
            shadow.appendChild(clone);
            var wc = window["WebComponents"];
            if (wc && wc.ShadowCSS)
                wc.ShadowCSS.shimStyling(template.content, target.selector, "");
            if (!!this.dontVisit || this.hasAttribute("dontVisit"))
                ;
            break templating;
            if (template.hasAttribute("lazy"))
                this.lazy = true;
            if (!this.lazy && !(this.parentComponent && this.parentComponent.lazy))
                bind_1.bindDom(shadow, [this].concat(this.ancestors));
            else if (this.lazy) {
                var uncreated = [].filter.call(shadow.querySelectorAll("*"), function (element) { return element.nodeName.indexOf("-") > -1; });
                var id = this.eventBus.addEventListener(events_1.ComponentCreatedEvent, function (e) {
                    var index = uncreated.indexOf(e.data);
                    if (index > -1)
                        uncreated.splice(index, 1);
                    if (uncreated.length == 0) {
                        bind_1.bindDom(shadow, [_this].concat(_this.ancestors));
                        _this.eventBus.removeEventListener(events_1.ComponentCreatedEvent, id);
                        _this.eventBus.dispatch(new events_1.ComponentReadyEvent(_this));
                    }
                });
            }
            else if (this.parentComponent && this.parentComponent.lazy) {
                var id = this.parentComponent.eventBus.addEventListener(events_1.ComponentReadyEvent, function (e) {
                    bind_1.bindDom(shadow, [_this].concat(_this.ancestors));
                    _this.parentComponent.eventBus.removeEventListener(events_1.ComponentReadyEvent, id);
                });
            }
        }
        this.onCreated.forEach(function (method) {
            method.call(_this, _this);
        });
        this.created();
    }
    exports.createdCallback = createdCallback;
    function attachedCallback() {
        var _this = this;
        if (this.parentComponent && this.parentComponent.lazy)
            this.parentComponent.eventBus.dispatch(new events_1.ComponentCreatedEvent(this));
        this.onAttached.forEach(function (method) {
            method.call(_this, _this);
        });
        this.attached();
    }
    exports.attachedCallback = attachedCallback;
    function detachedCallback() {
        var _this = this;
        this.onDetached.forEach(function (method) {
            method.call(_this, _this);
        });
        this.detached();
    }
    exports.detachedCallback = detachedCallback;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudC9yZWdpc3Rlci9wcm90b3R5cGUudHMiXSwibmFtZXMiOlsiY3JlYXRlUHJvdG90eXBlIiwiY3JlYXRlUHJvdG90eXBlLmciLCJhc3NpZ25DYWxsYmFjayIsImNyZWF0ZWRDYWxsYmFjayIsImF0dGFjaGVkQ2FsbGJhY2siLCJkZXRhY2hlZENhbGxiYWNrIl0sIm1hcHBpbmdzIjoiO0lBUUE7O09BRUc7SUFDSCx5QkFBeUIsTUFBVTtRQUNsQ0EsSUFBSUEsS0FBS0EsR0FBR0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7UUFFakRBLFdBQVdBLENBQUNBLEVBQUVBLENBQUNBO1lBQ1BDLEdBQUdBLENBQUNBO2dCQUFBQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUNBLElBQUlBO29CQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxTQUFTQSxJQUFJQSxDQUFDQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFBQTtZQUFBQSxDQUFDQSxRQUFPQSxJQUFJQSxFQUFDQTtRQUN6RkEsQ0FBQ0E7UUFDUkQsR0FBR0EsQ0FBQUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakNBLE1BQU1BLENBQUNBLGNBQWNBLENBQUNBLEtBQUtBLEVBQUVBLEdBQUdBLEVBQUVBLE1BQU1BLENBQUNBLHdCQUF3QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsU0FBU0EsRUFBRUEsR0FBR0EsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDbkdBLENBQUNBO1FBRURBOzs7Ozs7Ozs7Ozs7VUFZRUE7UUFDRkEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7SUFDZEEsQ0FBQ0E7SUFnSE8sdUJBQWUsbUJBaEh0QjtJQUVEOzs7T0FHRztJQUNILHdCQUF3QixNQUFVLEVBQUUsR0FBVSxFQUFFLEVBQVcsRUFBRSxJQUFPO1FBQVBFLG9CQUFPQSxHQUFQQSxTQUFPQTtRQUNuRUEsSUFBSUEsUUFBUUEsR0FBR0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDM0JBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBO1lBQ2IsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckIsT0FBTyxRQUFRLEtBQUssVUFBVSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2RSxDQUFDLENBQUFBO0lBQ0ZBLENBQUNBO0lBb0d3QixzQkFBYyxrQkFwR3RDO0lBR0Q7O09BRUc7SUFDSCx5QkFBeUIsUUFBWSxFQUFFLE1BQVU7UUFBakRDLGlCQTBFQ0E7UUF4RUFBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBRWxCQSxVQUFVQSxFQUFFQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMzQkEsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxDQUFDQTtZQUNyQ0EsSUFBSUEsS0FBS0EsR0FBR0EsUUFBUUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDeERBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1lBRTFCQSxJQUFJQSxFQUFFQSxHQUFHQSxNQUFNQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTtZQUNqQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7Z0JBQ3JCQSxFQUFFQSxDQUFDQSxTQUFTQSxDQUFDQSxXQUFXQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxFQUFFQSxNQUFNQSxDQUFDQSxRQUFRQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUVqRUEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsSUFBSUEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUFBLENBQUFBO1lBQ3JEQSxLQUFLQSxDQUFDQSxVQUFVQSxDQUFDQTtZQUVsQkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ2hDQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUVsQkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsSUFBSUEsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3JFQSxjQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7Z0JBQ2xCQSxJQUFJQSxTQUFTQSxHQUFHQSxFQUFFQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxnQkFBZ0JBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLFVBQUFBLE9BQU9BLElBQUtBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUFBLENBQUFBLENBQUNBLENBQUNBLENBQUNBO2dCQUNySEEsSUFBSUEsRUFB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LFVBQUFBLE1BQU1BO1lBQzdCQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFJQSxFQUFFQSxLQUFJQSxDQUFDQSxDQUFDQTtRQUN6QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDRkEsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7SUFDakJBLENBQUNBO0lBRTJFLHdCQUFnQixvQkFGM0Y7SUFFNEYiLCJmaWxlIjoiY29tcG9uZW50L3JlZ2lzdGVyL3Byb3RvdHlwZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RXZlbnRCdXN9IGZyb20gXCJob3JjcnV4LWV2ZW50XCJcclxuaW1wb3J0IHtnZXR9IGZyb20gXCJob3JjcnV4LWRpXCJcclxuXHJcbmltcG9ydCB7Q29tcG9uZW50Q3JlYXRlZEV2ZW50LCBDb21wb25lbnRSZWFkeUV2ZW50fSBmcm9tIFwiLi9ldmVudHNcIlxyXG5pbXBvcnQge0NvbXBvbmVudFJlZ2lzdHJ5fSBmcm9tIFwiLi4vY29tcG9uZW50cmVnaXN0cnlcIlxyXG5pbXBvcnQge0VsZW1lbnRSZWdpc3RlcmVkfSBmcm9tIFwiLi9yZWdpc3RlclwiXHJcbmltcG9ydCB7YmluZERvbX0gZnJvbSBcIi4uLy4uL2JpbmQvYmluZFwiXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBIVE1MRWxlbWVudC5wcm90b3R5cGUsIGFzc2lnbnMgYWxsIHByb3BlcnRpZXMgb2YgJ25ldyB0YXJnZXQoKScgdG8gaXQgYW5kIHJldHVybnMgaXQ7IFxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlUHJvdG90eXBlKHRhcmdldDphbnkpOiBhbnkge1xyXG5cdGxldCBwcm90byA9IE9iamVjdC5jcmVhdGUoSFRNTEVsZW1lbnQucHJvdG90eXBlKTtcclxuXHRcclxuXHRmdW5jdGlvbiBnKHAsIGspIHtcclxuICAgICAgICBcdGRvIHtpZihwLmhhc093blByb3BlcnR5KGspKSByZXR1cm4gcDsgZWxzZSBwID0gKHAucHJvdG90eXBlIHx8IHAuX19wcm90b19fKX0gd2hpbGUodHJ1ZSlcclxuICAgICAgICB9XHJcblx0Zm9yKHZhciBrZXkgaW4gdGFyZ2V0LnByb3RvdHlwZSkge1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZyh0YXJnZXQucHJvdG90eXBlLCBrZXkpLCBrZXkpKTtcclxuXHR9XHJcblx0XHJcblx0LypcclxuXHRsZXQgdCA9IHRhcmdldDtcclxuXHRkbyB7XHJcblx0XHR0ID0gdC5wcm90b3R5cGUgfHwgdC5fX3Byb3RvX187XHJcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KVxyXG5cdFx0LmZvckVhY2goa2V5ID0+IHtcclxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwga2V5KSk7XHJcblx0XHR9KVxyXG5cdH0gd2hpbGUoISEodC5wcm90b3R5cGUgfHwgdC5fX3Byb3RvX18pKVxyXG5cdFxyXG5cdGZvcihsZXQga2V5IGluIHRhcmdldC5wcm90b3R5cGUpXHJcblx0XHRwcm90b1trZXldID0gdGFyZ2V0LnByb3RvdHlwZVtrZXldO1xyXG5cdCovXHJcblx0cmV0dXJuIHByb3RvO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcyBhIGZ1bmN0aW9uIG5hbWVkICdrZXknIHRvICd0YXJnZXQnLCB3aGljaCBpcyBhIGZ1bmN0aW9uIHRoYXQgY2FsbHMgJ2NiJyB3aXRoIGdpdmVuICdhcmdzJ1xyXG4gKiBhbmQgdGhlbiBjYWxscyB0aGUgcHJldmlvdXMgJ3RhcmdldFtrZXldJyBpZiBpdCB3YXMgYSBmdW5jdGlvbiB3aXRoICdhcmdzJy4gXHJcbiAqL1xyXG5mdW5jdGlvbiBhc3NpZ25DYWxsYmFjayh0YXJnZXQ6YW55LCBrZXk6c3RyaW5nLCBjYjpGdW5jdGlvbiwgYXJncz1bXSk6IHZvaWQge1xyXG5cdGxldCBvcmlnaW5hbCA9IHRhcmdldFtrZXldO1xyXG5cdHRhcmdldFtrZXldID0gZnVuY3Rpb24oKSB7XHJcblx0XHRjYi5hcHBseSh0aGlzLCBhcmdzKTtcclxuXHRcdHR5cGVvZiBvcmlnaW5hbCA9PT0gXCJmdW5jdGlvblwiID8gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6ICcnO1xyXG5cdH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBEZWZhdWx0ICdjcmVhdGVkQ2FsbGJhY2snIGZvciBhIEN1c3RvbWVsZW1lbnQuIEFwcGVuZHMgdGhlICd0ZW1wbGF0ZScgY29udGVudCB0byBzaGFkb3dyb290LCBpZiAhIXRlbXBsYXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVkQ2FsbGJhY2sodGVtcGxhdGU6YW55LCB0YXJnZXQ6YW55KTp2b2lkIHtcclxuXHRcclxuXHR0YXJnZXQuY2FsbCh0aGlzKTtcclxuXHRcclxuXHR0ZW1wbGF0aW5nOiBpZighIXRlbXBsYXRlKSB7XHJcblx0XHRsZXQgc2hhZG93ID0gdGhpcy5jcmVhdGVTaGFkb3dSb290KCk7XHJcblx0XHRsZXQgY2xvbmUgPSBkb2N1bWVudC5pbXBvcnROb2RlKHRlbXBsYXRlLmNvbnRlbnQsIHRydWUpO1xyXG5cdFx0c2hhZG93LmFwcGVuZENoaWxkKGNsb25lKTtcclxuXHRcdFxyXG5cdFx0bGV0IHdjID0gd2luZG93W1wiV2ViQ29tcG9uZW50c1wiXTtcclxuXHRcdGlmKHdjICYmIHdjLlNoYWRvd0NTUylcclxuXHRcdFx0d2MuU2hhZG93Q1NTLnNoaW1TdHlsaW5nKHRlbXBsYXRlLmNvbnRlbnQsIHRhcmdldC5zZWxlY3RvciwgXCJcIik7XHJcblx0XHRcdFxyXG5cdFx0aWYoISF0aGlzLmRvbnRWaXNpdCB8fCB0aGlzLmhhc0F0dHJpYnV0ZShcImRvbnRWaXNpdFwiKSkpXHJcblx0XHRcdGJyZWFrIHRlbXBsYXRpbmc7XHJcblx0XHRcdFxyXG5cdFx0aWYodGVtcGxhdGUuaGFzQXR0cmlidXRlKFwibGF6eVwiKSlcclxuXHRcdFx0dGhpcy5sYXp5ID0gdHJ1ZTtcclxuXHRcdFxyXG5cdFx0aWYoIXRoaXMubGF6eSAmJiAhKHRoaXMucGFyZW50Q29tcG9uZW50ICYmIHRoaXMucGFyZW50Q29tcG9uZW50LmxhenkpKVxyXG5cdFx0XHRiaW5kRG9tKHNoYWRvdywgW3RoaXNdLmNvbmNhdCh0aGlzLmFuY2VzdG9ycykpO1xyXG5cdFx0ZWxzZSBpZih0aGlzLmxhenkpe1xyXG5cdFx0XHRsZXQgdW5jcmVhdGVkID0gW10uZmlsdGVyLmNhbGwoc2hhZG93LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqXCIpLCBlbGVtZW50ID0+IHtyZXR1cm4gZWxlbWVudC5ub2RlTmFtZS5pbmRleE9mKFwiLVwiKSA+IC0xfSk7XHJcblx0XHRcdGxldCBpZCA9IHRoaXMuZXZlbnRCdXMuYWRkRXZlbnRMaXN0ZW5lcihDb21wb25lbnRDcmVhdGVkRXZlbnQsIGUgPT4ge1xyXG5cdFx0XHRcdGxldCBpbmRleCA9IHVuY3JlYXRlZC5pbmRleE9mKGUuZGF0YSk7XHJcblx0XHRcdFx0aWYoaW5kZXggPiAtMSkgdW5jcmVhdGVkLnNwbGljZShpbmRleCwgMSk7XHJcblx0XHRcdFx0aWYodW5jcmVhdGVkLmxlbmd0aCA9PSAwKSB7XHJcblx0XHRcdFx0XHRiaW5kRG9tKHNoYWRvdywgW3RoaXNdLmNvbmNhdCh0aGlzLmFuY2VzdG9ycykpO1xyXG5cdFx0XHRcdFx0dGhpcy5ldmVudEJ1cy5yZW1vdmVFdmVudExpc3RlbmVyKENvbXBvbmVudENyZWF0ZWRFdmVudCwgaWQpO1xyXG5cdFx0XHRcdFx0dGhpcy5ldmVudEJ1cy5kaXNwYXRjaChuZXcgQ29tcG9uZW50UmVhZHlFdmVudCh0aGlzKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZih0aGlzLnBhcmVudENvbXBvbmVudCAmJiB0aGlzLnBhcmVudENvbXBvbmVudC5sYXp5KSB7XHJcblx0XHRcdGxldCBpZCA9IHRoaXMucGFyZW50Q29tcG9uZW50LmV2ZW50QnVzLmFkZEV2ZW50TGlzdGVuZXIoQ29tcG9uZW50UmVhZHlFdmVudCwgZSA9PiB7XHJcblx0XHRcdFx0YmluZERvbShzaGFkb3csIFt0aGlzXS5jb25jYXQodGhpcy5hbmNlc3RvcnMpKTtcclxuXHRcdFx0XHR0aGlzLnBhcmVudENvbXBvbmVudC5ldmVudEJ1cy5yZW1vdmVFdmVudExpc3RlbmVyKENvbXBvbmVudFJlYWR5RXZlbnQsIGlkKTtcclxuXHRcdFx0fSlcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0LypcclxuXHRcdGxldCB1bnJlc29sdmVkID0gW10uZmlsdGVyLmNhbGwoc2hhZG93LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqW3dhaXRdXCIpLCBlbGVtZW50ID0+IHtcclxuXHRcdFx0cmV0dXJuICEoZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIGluIENvbXBvbmVudFJlZ2lzdHJ5KTtcclxuXHRcdH0pLm1hcChlbGVtZW50ID0+IHtcclxuXHRcdFx0cmV0dXJuIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdH0pXHJcblx0XHQuc29ydCgpXHJcblx0XHQucmVkdWNlKChhLCBiKSA9PiB7IGlmIChiICE9IGFbMF0pIGEudW5zaGlmdChiKTsgcmV0dXJuIGEgfSwgW10pO1xyXG5cdFx0XHJcblx0XHRpZih1bnJlc29sdmVkLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0bGV0IGViID0gZ2V0KEV2ZW50QnVzKTtcclxuXHRcdFx0bGV0IGlkID0gZWIuYWRkRXZlbnRMaXN0ZW5lcihFbGVtZW50UmVnaXN0ZXJlZCwgZSA9PiB7XHJcblx0XHRcdFx0bGV0IGluZGV4ID0gdW5yZXNvbHZlZC5pbmRleE9mKGUuZGF0YSk7XHJcblx0XHRcdFx0aWYoaW5kZXggPT09IC0xKSByZXR1cm47XHJcblx0XHRcdFx0dW5yZXNvbHZlZC5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdFx0XHRcdGlmKHVucmVzb2x2ZWQubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdFx0XHRlYi5yZW1vdmVFdmVudExpc3RlbmVyKEVsZW1lbnRSZWdpc3RlcmVkLCBpZCk7XHJcblx0XHRcdFx0XHRiaW5kRG9tKHNoYWRvdywgW3RoaXNdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0YmluZERvbShzaGFkb3csIFt0aGlzXSk7XHJcblx0XHR9XHJcblx0XHQqL1xyXG5cdFx0XHJcblx0fVxyXG5cdFxyXG5cdHRoaXMub25DcmVhdGVkLmZvckVhY2gobWV0aG9kID0+IHtcclxuXHRcdG1ldGhvZC5jYWxsKHRoaXMsIHRoaXMpO1xyXG5cdH0pXHJcblx0XHJcblx0dGhpcy5jcmVhdGVkKCk7XHJcblx0XHJcblx0XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF0dGFjaGVkQ2FsbGJhY2soKTogdm9pZCB7XHJcblx0aWYodGhpcy5wYXJlbnRDb21wb25lbnQgJiYgdGhpcy5wYXJlbnRDb21wb25lbnQubGF6eSlcclxuXHRcdHRoaXMucGFyZW50Q29tcG9uZW50LmV2ZW50QnVzLmRpc3BhdGNoKG5ldyBDb21wb25lbnRDcmVhdGVkRXZlbnQodGhpcykpO1xyXG5cdFxyXG5cdHRoaXMub25BdHRhY2hlZC5mb3JFYWNoKG1ldGhvZCA9PiB7XHJcblx0XHRtZXRob2QuY2FsbCh0aGlzLCB0aGlzKTtcclxuXHR9KVxyXG5cdFxyXG5cdHRoaXMuYXR0YWNoZWQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGV0YWNoZWRDYWxsYmFjaygpOiB2b2lkIHtcclxuXHR0aGlzLm9uRGV0YWNoZWQuZm9yRWFjaChtZXRob2QgPT4ge1xyXG5cdFx0bWV0aG9kLmNhbGwodGhpcywgdGhpcyk7XHJcblx0fSlcclxuXHR0aGlzLmRldGFjaGVkKCk7XHJcbn1cclxuXHJcbmV4cG9ydCB7Y3JlYXRlUHJvdG90eXBlLCBhc3NpZ25DYWxsYmFjaywgY3JlYXRlZENhbGxiYWNrLCBhdHRhY2hlZENhbGxiYWNrLCBkZXRhY2hlZENhbGxiYWNrfSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==