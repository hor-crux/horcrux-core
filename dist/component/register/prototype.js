define(["require", "exports", "../../bind/bind"], function (require, exports, bind_1) {
    /**
     * Creates a new HTMLElement.prototype, assigns all properties of 'new target()' to it and returns it;
     */
    function createPrototype(target) {
        var proto = Object.create(HTMLElement.prototype);
        var t = target;
        do {
            t = t.prototype || t.__proto__;
            Object.getOwnPropertyNames(t)
                .forEach(function (key) {
                Object.defineProperty(proto, key, Object.getOwnPropertyDescriptor(t, key));
            });
        } while (!!(t.prototype || t.__proto__));
        /*
        for(let key in target.prototype)
            proto[key] = target.prototype[key];
        */
        return proto;
    }
    exports.createPrototype = createPrototype;
    /**
     * Adds a function named 'key' to 'target', which is a function that calls 'cb' with given 'args'
     * and then calls the previous 'target[key]' if it was a function with 'args'.
     */
    function assignCallback(target, key, cb, args) {
        if (args === void 0) { args = []; }
        var original = target[key];
        target[key] = function () {
            cb.apply(this, args);
            typeof original === "function" ? original.apply(this, arguments) : '';
        };
    }
    exports.assignCallback = assignCallback;
    /**
     * Default 'createdCallback' for a Customelement. Appends the 'template' content to shadowroot, if !!template
     */
    function createdCallback(template, target) {
        var _this = this;
        target.call(this);
        if (!!template) {
            var shadow = this.createShadowRoot();
            var clone = document.importNode(template.content, true);
            shadow.appendChild(clone);
            var wc = window["WebComponents"];
            if (wc && wc.ShadowCSS)
                wc.ShadowCSS.shimStyling(template.content, target.selector, "");
            Promise.all(this.beforeBinding || [])
                .then(function (_) {
                bind_1.bindDom(shadow, [_this]);
            });
        }
        this.onCreated.forEach(function (method) {
            method.call(_this, _this);
        });
        this.created();
    }
    exports.createdCallback = createdCallback;
    function attachedCallback() {
        var _this = this;
        this.onAttached.forEach(function (method) {
            method.call(_this, _this);
        });
        this.attached();
    }
    exports.attachedCallback = attachedCallback;
    function detachedCallback() {
        var _this = this;
        this.onDetached.forEach(function (method) {
            method.call(_this, _this);
        });
        this.detached();
    }
    exports.detachedCallback = detachedCallback;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudC9yZWdpc3Rlci9wcm90b3R5cGUudHMiXSwibmFtZXMiOlsiY3JlYXRlUHJvdG90eXBlIiwiYXNzaWduQ2FsbGJhY2siLCJjcmVhdGVkQ2FsbGJhY2siLCJhdHRhY2hlZENhbGxiYWNrIiwiZGV0YWNoZWRDYWxsYmFjayJdLCJtYXBwaW5ncyI6IjtJQUVBOztPQUVHO0lBQ0gseUJBQXlCLE1BQVU7UUFDbENBLElBQUlBLEtBQUtBLEdBQUdBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1FBRWpEQSxJQUFJQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtRQUNmQSxHQUFHQSxDQUFDQTtZQUNIQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxTQUFTQSxJQUFJQSxDQUFDQSxDQUFDQSxTQUFTQSxDQUFDQTtZQUMvQkEsTUFBTUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxDQUFDQSxDQUFDQTtpQkFDNUJBLE9BQU9BLENBQUNBLFVBQUFBLEdBQUdBO2dCQUNYQSxNQUFNQSxDQUFDQSxjQUFjQSxDQUFDQSxLQUFLQSxFQUFFQSxHQUFHQSxFQUFFQSxNQUFNQSxDQUFDQSx3QkFBd0JBLENBQUNBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQzVFQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNIQSxDQUFDQSxRQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxTQUFTQSxJQUFJQSxDQUFDQSxDQUFDQSxTQUFTQSxDQUFDQSxFQUFDQTtRQUV2Q0E7OztVQUdFQTtRQUNGQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtJQUNkQSxDQUFDQTtJQXlETyx1QkFBZSxtQkF6RHRCO0lBRUQ7OztPQUdHO0lBQ0gsd0JBQXdCLE1BQVUsRUFBRSxHQUFVLEVBQUUsRUFBVyxFQUFFLElBQU87UUFBUEMsb0JBQU9BLEdBQVBBLFNBQU9BO1FBQ25FQSxJQUFJQSxRQUFRQSxHQUFHQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUMzQkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0E7WUFDYixFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyQixPQUFPLFFBQVEsS0FBSyxVQUFVLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZFLENBQUMsQ0FBQUE7SUFDRkEsQ0FBQ0E7SUE2Q3dCLHNCQUFjLGtCQTdDdEM7SUFFRDs7T0FFRztJQUNILHlCQUF5QixRQUFZLEVBQUUsTUFBVTtRQUFqREMsaUJBd0JDQTtRQXRCQUEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFFbEJBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO1lBQ2ZBLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLGdCQUFnQkEsRUFBRUEsQ0FBQ0E7WUFDckNBLElBQUlBLEtBQUtBLEdBQUdBLFFBQVFBLENBQUNBLFVBQVVBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1lBQ3hEQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtZQUUxQkEsSUFBSUEsRUFBRUEsR0FBR0EsTUFBTUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7WUFDakNBLEVBQUVBLENBQUFBLENBQUNBLEVBQUVBLElBQUlBLEVBQUVBLENBQUNBLFNBQVNBLENBQUNBO2dCQUNyQkEsRUFBRUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsRUFBRUEsTUFBTUEsQ0FBQ0EsUUFBUUEsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFFakVBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLElBQUdBLEVBQUVBLENBQUNBO2lCQUNuQ0EsSUFBSUEsQ0FBQ0EsVUFBQUEsQ0FBQ0E7Z0JBQ05BLGNBQU9BLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEtBQUlBLENBQUNBLENBQUNBLENBQUNBO1lBQ3pCQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNIQSxDQUFDQTtRQUVEQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFBQSxNQUFNQTtZQUM1QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBSUEsRUFBRUEsS0FBSUEsQ0FBQ0EsQ0FBQ0E7UUFDekJBLENBQUNBLENBQUNBLENBQUFBO1FBRUZBLElBQUlBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO0lBQ2hCQSxDQUFDQTtJQWdCd0MsdUJBQWUsbUJBaEJ2RDtJQUVEO1FBQUFDLGlCQUtDQTtRQUpBQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFBQSxNQUFNQTtZQUM3QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBSUEsRUFBRUEsS0FBSUEsQ0FBQ0EsQ0FBQ0E7UUFDekJBLENBQUNBLENBQUNBLENBQUFBO1FBQ0ZBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBO0lBQ2pCQSxDQUFDQTtJQVN5RCx3QkFBZ0Isb0JBVHpFO0lBRUQ7UUFBQUMsaUJBS0NBO1FBSkFBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE9BQU9BLENBQUNBLFVBQUFBLE1BQU1BO1lBQzdCQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFJQSxFQUFFQSxLQUFJQSxDQUFDQSxDQUFDQTtRQUN6QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDRkEsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7SUFDakJBLENBQUNBO0lBRTJFLHdCQUFnQixvQkFGM0Y7SUFFNEYiLCJmaWxlIjoiY29tcG9uZW50L3JlZ2lzdGVyL3Byb3RvdHlwZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YmluZERvbX0gZnJvbSBcIi4uLy4uL2JpbmQvYmluZFwiXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBIVE1MRWxlbWVudC5wcm90b3R5cGUsIGFzc2lnbnMgYWxsIHByb3BlcnRpZXMgb2YgJ25ldyB0YXJnZXQoKScgdG8gaXQgYW5kIHJldHVybnMgaXQ7IFxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlUHJvdG90eXBlKHRhcmdldDphbnkpOiBhbnkge1xyXG5cdGxldCBwcm90byA9IE9iamVjdC5jcmVhdGUoSFRNTEVsZW1lbnQucHJvdG90eXBlKTtcclxuXHRcclxuXHRsZXQgdCA9IHRhcmdldDtcclxuXHRkbyB7XHJcblx0XHR0ID0gdC5wcm90b3R5cGUgfHwgdC5fX3Byb3RvX187XHJcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KVxyXG5cdFx0LmZvckVhY2goa2V5ID0+IHtcclxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwga2V5KSk7XHJcblx0XHR9KVxyXG5cdH0gd2hpbGUoISEodC5wcm90b3R5cGUgfHwgdC5fX3Byb3RvX18pKVxyXG5cdFxyXG5cdC8qXHJcblx0Zm9yKGxldCBrZXkgaW4gdGFyZ2V0LnByb3RvdHlwZSlcclxuXHRcdHByb3RvW2tleV0gPSB0YXJnZXQucHJvdG90eXBlW2tleV07XHJcblx0Ki9cclxuXHRyZXR1cm4gcHJvdG87XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEgZnVuY3Rpb24gbmFtZWQgJ2tleScgdG8gJ3RhcmdldCcsIHdoaWNoIGlzIGEgZnVuY3Rpb24gdGhhdCBjYWxscyAnY2InIHdpdGggZ2l2ZW4gJ2FyZ3MnXHJcbiAqIGFuZCB0aGVuIGNhbGxzIHRoZSBwcmV2aW91cyAndGFyZ2V0W2tleV0nIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIHdpdGggJ2FyZ3MnLiBcclxuICovXHJcbmZ1bmN0aW9uIGFzc2lnbkNhbGxiYWNrKHRhcmdldDphbnksIGtleTpzdHJpbmcsIGNiOkZ1bmN0aW9uLCBhcmdzPVtdKTogdm9pZCB7XHJcblx0bGV0IG9yaWdpbmFsID0gdGFyZ2V0W2tleV07XHJcblx0dGFyZ2V0W2tleV0gPSBmdW5jdGlvbigpIHtcclxuXHRcdGNiLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG5cdFx0dHlwZW9mIG9yaWdpbmFsID09PSBcImZ1bmN0aW9uXCIgPyBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogJyc7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogRGVmYXVsdCAnY3JlYXRlZENhbGxiYWNrJyBmb3IgYSBDdXN0b21lbGVtZW50LiBBcHBlbmRzIHRoZSAndGVtcGxhdGUnIGNvbnRlbnQgdG8gc2hhZG93cm9vdCwgaWYgISF0ZW1wbGF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlZENhbGxiYWNrKHRlbXBsYXRlOmFueSwgdGFyZ2V0OmFueSk6dm9pZCB7XHJcblx0XHJcblx0dGFyZ2V0LmNhbGwodGhpcyk7XHJcblx0XHJcblx0aWYoISF0ZW1wbGF0ZSkge1xyXG5cdFx0bGV0IHNoYWRvdyA9IHRoaXMuY3JlYXRlU2hhZG93Um9vdCgpO1xyXG5cdFx0bGV0IGNsb25lID0gZG9jdW1lbnQuaW1wb3J0Tm9kZSh0ZW1wbGF0ZS5jb250ZW50LCB0cnVlKTtcclxuXHRcdHNoYWRvdy5hcHBlbmRDaGlsZChjbG9uZSk7XHJcblx0XHRcclxuXHRcdGxldCB3YyA9IHdpbmRvd1tcIldlYkNvbXBvbmVudHNcIl07XHJcblx0XHRpZih3YyAmJiB3Yy5TaGFkb3dDU1MpXHJcblx0XHRcdHdjLlNoYWRvd0NTUy5zaGltU3R5bGluZyh0ZW1wbGF0ZS5jb250ZW50LCB0YXJnZXQuc2VsZWN0b3IsIFwiXCIpO1xyXG5cdFx0XHJcblx0XHRQcm9taXNlLmFsbCh0aGlzLmJlZm9yZUJpbmRpbmcgfHxbXSlcclxuXHRcdC50aGVuKF8gPT4ge1xyXG5cdFx0XHRiaW5kRG9tKHNoYWRvdywgW3RoaXNdKTtcclxuXHRcdH0pXHJcblx0fVxyXG5cdFxyXG5cdHRoaXMub25DcmVhdGVkLmZvckVhY2gobWV0aG9kID0+IHtcclxuXHRcdG1ldGhvZC5jYWxsKHRoaXMsIHRoaXMpO1xyXG5cdH0pXHJcblx0XHJcblx0dGhpcy5jcmVhdGVkKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF0dGFjaGVkQ2FsbGJhY2soKTogdm9pZCB7XHJcblx0dGhpcy5vbkF0dGFjaGVkLmZvckVhY2gobWV0aG9kID0+IHtcclxuXHRcdG1ldGhvZC5jYWxsKHRoaXMsIHRoaXMpO1xyXG5cdH0pXHJcblx0dGhpcy5hdHRhY2hlZCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZXRhY2hlZENhbGxiYWNrKCk6IHZvaWQge1xyXG5cdHRoaXMub25EZXRhY2hlZC5mb3JFYWNoKG1ldGhvZCA9PiB7XHJcblx0XHRtZXRob2QuY2FsbCh0aGlzLCB0aGlzKTtcclxuXHR9KVxyXG5cdHRoaXMuZGV0YWNoZWQoKTtcclxufVxyXG5cclxuZXhwb3J0IHtjcmVhdGVQcm90b3R5cGUsIGFzc2lnbkNhbGxiYWNrLCBjcmVhdGVkQ2FsbGJhY2ssIGF0dGFjaGVkQ2FsbGJhY2ssIGRldGFjaGVkQ2FsbGJhY2t9Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9