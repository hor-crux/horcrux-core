define(["require", "exports", "./bind", "observejs"], function (require, exports, bind_1, observejs_1) {
    function bindNode(node, model) {
        var isTextNode = node.nodeType === 3;
        var hasOnlyTextNodes = (node.shadowRoot && node.shadowRoot.childElementCount === 0) || node.childElementCount === 0;
        if (isTextNode || hasOnlyTextNodes) {
            bindTextNode(node, model);
        }
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = bindNode;
    function bindTextNode(node, model) {
        bind_1.regex.lastIndex = 0;
        var match = bind_1.regex.exec(node.textContent);
        if (match) {
            var path = match[1];
            var escapedPath = path.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
            var r = new RegExp("\{\{" + escapedPath + "\}\}", "g");
            var originalText = node.textContent;
            var _a = model.get(path), object = _a.object, value = _a.value;
            var observer = new observejs_1.PathObserver(object, path);
            var cb = function (newVal, oldVal) {
                node.textContent = originalText.replace(r, newVal);
            };
            observer.open(cb);
            cb(value, null);
        }
    }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpbmQvYmluZG5vZGUudHMiXSwibmFtZXMiOlsiYmluZE5vZGUiLCJiaW5kVGV4dE5vZGUiXSwibWFwcGluZ3MiOiI7SUFJQSxrQkFBaUMsSUFBUyxFQUFFLEtBQVc7UUFDdERBLElBQUlBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLEtBQUtBLENBQUNBLENBQUNBO1FBQ3JDQSxJQUFJQSxnQkFBZ0JBLEdBQUlBLENBQU9BLElBQUtBLENBQUNBLFVBQVVBLElBQVVBLElBQUtBLENBQUNBLFVBQVVBLENBQUNBLGlCQUFpQkEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsSUFBY0EsSUFBS0EsQ0FBQ0EsaUJBQWlCQSxLQUFLQSxDQUFDQSxDQUFBQTtRQUM3SUEsRUFBRUEsQ0FBQUEsQ0FBQ0EsVUFBVUEsSUFBSUEsZ0JBQWdCQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNuQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDM0JBLENBQUNBO0lBRUZBLENBQUNBO0lBUEQ7OEJBT0MsQ0FBQTtJQUVELHNCQUFzQixJQUFTLEVBQUUsS0FBVztRQUMzQ0MsWUFBS0EsQ0FBQ0EsU0FBU0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDcEJBLElBQUlBLEtBQUtBLEdBQUdBLFlBQUtBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1FBQ3pDQSxFQUFFQSxDQUFBQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNWQSxJQUFJQSxJQUFJQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNwQkEsSUFBSUEsV0FBV0EsR0FBSUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EscUNBQXFDQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUMvRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsTUFBTUEsQ0FBQ0EsTUFBTUEsR0FBR0EsV0FBV0EsR0FBR0EsTUFBTUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQUE7WUFHdERBLElBQUlBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBO1lBRXBDQSxJQUFJQSxLQUFrQkEsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBaENBLE1BQU1BLGNBQUVBLEtBQUtBLFdBQW1CQSxDQUFDQTtZQUN0Q0EsSUFBSUEsUUFBUUEsR0FBR0EsSUFBSUEsd0JBQVlBLENBQUNBLE1BQU1BLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1lBRTlDQSxJQUFJQSxFQUFFQSxHQUFHQSxVQUFDQSxNQUFNQSxFQUFFQSxNQUFNQTtnQkFDdkJBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO1lBQ3BEQSxDQUFDQSxDQUFDQTtZQUNGQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNsQkEsRUFBRUEsQ0FBQ0EsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDakJBLENBQUNBO0lBQ0ZBLENBQUNBIiwiZmlsZSI6ImJpbmQvYmluZG5vZGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTW9kZWwgZnJvbSBcIi4vbW9kZWxcIlxyXG5pbXBvcnQge3JlZ2V4fSBmcm9tIFwiLi9iaW5kXCJcclxuaW1wb3J0IHtQYXRoT2JzZXJ2ZXJ9IGZyb20gXCJvYnNlcnZlanNcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZE5vZGUobm9kZTpOb2RlLCBtb2RlbDpNb2RlbCk6IHZvaWQge1xyXG5cdGxldCBpc1RleHROb2RlID0gbm9kZS5ub2RlVHlwZSA9PT0gMztcclxuXHRsZXQgaGFzT25seVRleHROb2RlcyA9ICAoKDxhbnk+bm9kZSkuc2hhZG93Um9vdCAmJiAoPGFueT5ub2RlKS5zaGFkb3dSb290LmNoaWxkRWxlbWVudENvdW50ID09PSAwKSB8fCAoPEVsZW1lbnQ+bm9kZSkuY2hpbGRFbGVtZW50Q291bnQgPT09IDAgXHJcblx0aWYoaXNUZXh0Tm9kZSB8fCBoYXNPbmx5VGV4dE5vZGVzKSB7XHJcblx0XHRiaW5kVGV4dE5vZGUobm9kZSwgbW9kZWwpO1xyXG5cdH1cclxuXHRcclxufVxyXG5cclxuZnVuY3Rpb24gYmluZFRleHROb2RlKG5vZGU6Tm9kZSwgbW9kZWw6TW9kZWwpOiB2b2lkIHtcclxuXHRyZWdleC5sYXN0SW5kZXggPSAwO1xyXG5cdGxldCBtYXRjaCA9IHJlZ2V4LmV4ZWMobm9kZS50ZXh0Q29udGVudCk7XHJcblx0aWYobWF0Y2gpIHtcclxuXHRcdGxldCBwYXRoID0gbWF0Y2hbMV07XHJcblx0XHRsZXQgZXNjYXBlZFBhdGggPSAgcGF0aC5yZXBsYWNlKC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZywgXCJcXFxcJCZcIik7XHJcblx0XHRsZXQgciA9IG5ldyBSZWdFeHAoXCJcXHtcXHtcIiArIGVzY2FwZWRQYXRoICsgXCJcXH1cXH1cIiwgXCJnXCIpXHJcblx0XHRcclxuXHRcdFxyXG5cdFx0bGV0IG9yaWdpbmFsVGV4dCA9IG5vZGUudGV4dENvbnRlbnQ7XHJcblx0XHRcclxuXHRcdGxldCB7b2JqZWN0LCB2YWx1ZX0gPSBtb2RlbC5nZXQocGF0aCk7XHJcblx0XHRsZXQgb2JzZXJ2ZXIgPSBuZXcgUGF0aE9ic2VydmVyKG9iamVjdCwgcGF0aCk7XHJcblx0XHRcclxuXHRcdGxldCBjYiA9IChuZXdWYWwsIG9sZFZhbCkgPT4ge1xyXG5cdFx0XHRub2RlLnRleHRDb250ZW50ID0gb3JpZ2luYWxUZXh0LnJlcGxhY2UociwgbmV3VmFsKTtcclxuXHRcdH07XHJcblx0XHRvYnNlcnZlci5vcGVuKGNiKTtcclxuXHRcdGNiKHZhbHVlLCBudWxsKTtcclxuXHR9XHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=