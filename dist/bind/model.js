define(["require", "exports"], function (require, exports) {
    var Model = (function () {
        function Model(objects) {
            this.objects = objects;
        }
        Model.prototype.get = function (path) {
            var ret = { object: void 0, value: void 0 };
            this.objects.forEach(function (obj) {
                if (Model.has(obj, path))
                    return ret = {
                        object: obj,
                        value: Model.get(obj, path)
                    };
            });
            return ret;
        };
        Model.prototype.set = function (path, value) {
            this.objects.forEach(function (obj) {
                if (Model.has(obj, path)) {
                    return Model.set(obj, path, value);
                }
            });
        };
        Model.prototype.findObject = function (path) {
            var ret = void 0;
            this.objects.forEach(function (obj) {
                if (!!Model.has(obj, path))
                    return ret = obj;
            });
            return ret;
        };
        Model.has = function (object, path) {
            var ret = true;
            path.split('.')
                .forEach(function (part, index, parts) {
                if (typeof object[part] === 'undefined' && index + 1 < parts.length)
                    return ret = false;
                else {
                    object = object[part];
                }
            });
            return ret;
        };
        Model.get = function (object, path) {
            path.split('.')
                .forEach(function (part) {
                object = object && object[part];
            });
            return object;
        };
        Model.set = function (object, path, value) {
            var parts = path.split('.');
            var key = parts.pop();
            parts.forEach(function (part) {
                object = object[part];
            });
            object[key] = value;
        };
        return Model;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Model;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpbmQvbW9kZWwudHMiXSwibmFtZXMiOlsiTW9kZWwiLCJNb2RlbC5jb25zdHJ1Y3RvciIsIk1vZGVsLmdldCIsIk1vZGVsLnNldCIsIk1vZGVsLmZpbmRPYmplY3QiLCJNb2RlbC5oYXMiXSwibWFwcGluZ3MiOiI7SUFFQTtRQUlDQSxlQUFZQSxPQUFrQkE7WUFDN0JDLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLE9BQU9BLENBQUNBO1FBQ3hCQSxDQUFDQTtRQUVNRCxtQkFBR0EsR0FBVkEsVUFBV0EsSUFBV0E7WUFDckJFLElBQUlBLEdBQUdBLEdBQW1CQSxFQUFDQSxNQUFNQSxFQUFFQSxLQUFLQSxDQUFDQSxFQUFFQSxLQUFLQSxFQUFFQSxLQUFLQSxDQUFDQSxFQUFDQSxDQUFDQTtZQUUxREEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQUEsR0FBR0E7Z0JBQ3ZCQSxFQUFFQSxDQUFBQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtvQkFDdkJBLE1BQU1BLENBQUNBLEdBQUdBLEdBQUdBO3dCQUNaQSxNQUFNQSxFQUFFQSxHQUFHQTt3QkFDWEEsS0FBS0EsRUFBRUEsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsRUFBQ0EsSUFBSUEsQ0FBQ0E7cUJBQzFCQSxDQUFBQTtZQUNIQSxDQUFDQSxDQUFDQSxDQUFBQTtZQUVGQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNaQSxDQUFDQTtRQUVNRixtQkFBR0EsR0FBVkEsVUFBV0EsSUFBV0EsRUFBRUEsS0FBU0E7WUFDaENHLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLFVBQUFBLEdBQUdBO2dCQUN2QkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3pCQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtnQkFDcENBLENBQUNBO1lBQ0ZBLENBQUNBLENBQUNBLENBQUFBO1FBQ0hBLENBQUNBO1FBRU1ILDBCQUFVQSxHQUFqQkEsVUFBa0JBLElBQVdBO1lBQzVCSSxJQUFJQSxHQUFHQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFDQTtZQUNqQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQUEsR0FBR0E7Z0JBQ3ZCQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtvQkFDekJBLE1BQU1BLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBO1lBQ25CQSxDQUFDQSxDQUFDQSxDQUFBQTtZQUVGQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUNaQSxDQUFDQTtRQUVNSixTQUFHQSxHQUFWQSxVQUFXQSxNQUFVQSxFQUFFQSxJQUFXQTtZQUNqQ0ssSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFFZkEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0E7aUJBQ2RBLE9BQU9BLENBQUNBLFVBQUNBLElBQUlBLEVBQUVBLEtBQUtBLEVBQUVBLEtBQUtBO2dCQUMzQkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsT0FBT0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsV0FBV0EsSUFBSUEsS0FBS0EsR0FBQ0EsQ0FBQ0EsR0FBR0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7b0JBQ2hFQSxNQUFNQSxDQUFDQSxHQUFHQSxHQUFHQSxLQUFLQSxDQUFDQTtnQkFDcEJBLElBQUlBLENBQUNBLENBQUNBO29CQUNMQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFBQTtnQkFDdEJBLENBQUNBO1lBQ0ZBLENBQUNBLENBQUNBLENBQUFBO1lBRUZBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ1pBLENBQUNBO1FBRU1MLFNBQUdBLEdBQVZBLFVBQVdBLE1BQVVBLEVBQUVBLElBQVdBO1lBQ2pDRSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQTtpQkFDZEEsT0FBT0EsQ0FBQ0EsVUFBQUEsSUFBSUE7Z0JBQ1pBLE1BQU1BLEdBQUdBLE1BQU1BLElBQUlBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUFBO1lBQ2hDQSxDQUFDQSxDQUFDQSxDQUFBQTtZQUVGQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUNmQSxDQUFDQTtRQUVNRixTQUFHQSxHQUFWQSxVQUFXQSxNQUFVQSxFQUFFQSxJQUFXQSxFQUFFQSxLQUFTQTtZQUM1Q0csSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDNUJBLElBQUlBLEdBQUdBLEdBQUdBLEtBQUtBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO1lBRXRCQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFBQSxJQUFJQTtnQkFDakJBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUFBO1lBQ3RCQSxDQUFDQSxDQUFDQSxDQUFBQTtZQUVGQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUNyQkEsQ0FBQ0E7UUFFRkgsWUFBQ0E7SUFBREEsQ0EzRUEsQUEyRUNBLElBQUE7SUEzRUQ7MkJBMkVDLENBQUEiLCJmaWxlIjoiYmluZC9tb2RlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T2JqZWN0QW5kVmFsdWV9IGZyb20gXCIuLi91dGlsL3R5cGVzXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGVsIHtcclxuXHRcclxuXHRwcm90ZWN0ZWQgb2JqZWN0czpBcnJheTxhbnk+O1xyXG5cdFxyXG5cdGNvbnN0cnVjdG9yKG9iamVjdHM6QXJyYXk8YW55Pikge1xyXG5cdFx0dGhpcy5vYmplY3RzID0gb2JqZWN0cztcclxuXHR9XHJcblx0XHJcblx0cHVibGljIGdldChwYXRoOnN0cmluZyk6IE9iamVjdEFuZFZhbHVlIHtcclxuXHRcdGxldCByZXQ6IE9iamVjdEFuZFZhbHVlID0ge29iamVjdDogdm9pZCAwLCB2YWx1ZTogdm9pZCAwfTtcclxuXHRcdFxyXG5cdFx0dGhpcy5vYmplY3RzLmZvckVhY2gob2JqID0+IHtcclxuXHRcdFx0aWYoTW9kZWwuaGFzKG9iaiwgcGF0aCkpXHJcblx0XHRcdFx0cmV0dXJuIHJldCA9IHtcclxuXHRcdFx0XHRcdG9iamVjdDogb2JqLFxyXG5cdFx0XHRcdFx0dmFsdWU6IE1vZGVsLmdldChvYmoscGF0aClcclxuXHRcdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgc2V0KHBhdGg6c3RyaW5nLCB2YWx1ZTphbnkpOiB2b2lkIHtcclxuXHRcdHRoaXMub2JqZWN0cy5mb3JFYWNoKG9iaiA9PiB7XHJcblx0XHRcdGlmKE1vZGVsLmhhcyhvYmosIHBhdGgpKSB7XHJcblx0XHRcdFx0cmV0dXJuIE1vZGVsLnNldChvYmosIHBhdGgsIHZhbHVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHR9XHJcblx0XHJcblx0cHVibGljIGZpbmRPYmplY3QocGF0aDpzdHJpbmcpOiBhbnkge1xyXG5cdFx0bGV0IHJldCA9IHZvaWQgMDtcclxuXHRcdHRoaXMub2JqZWN0cy5mb3JFYWNoKG9iaiA9PiB7XHJcblx0XHRcdGlmKCEhTW9kZWwuaGFzKG9iaiwgcGF0aCkpXHJcblx0XHRcdFx0cmV0dXJuIHJldCA9IG9iajtcclxuXHRcdH0pXHJcblx0XHRcclxuXHRcdHJldHVybiByZXQ7XHJcblx0fVxyXG5cdFxyXG5cdHN0YXRpYyBoYXMob2JqZWN0OmFueSwgcGF0aDpzdHJpbmcpOiBib29sZWFuIHtcclxuXHRcdGxldCByZXQgPSB0cnVlO1xyXG5cdFx0XHJcblx0XHRwYXRoLnNwbGl0KCcuJylcclxuXHRcdC5mb3JFYWNoKChwYXJ0LCBpbmRleCwgcGFydHMpID0+IHtcclxuXHRcdFx0aWYodHlwZW9mIG9iamVjdFtwYXJ0XSA9PT0gJ3VuZGVmaW5lZCcgJiYgaW5kZXgrMSA8IHBhcnRzLmxlbmd0aClcclxuXHRcdFx0XHRyZXR1cm4gcmV0ID0gZmFsc2U7XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdG9iamVjdCA9IG9iamVjdFtwYXJ0XVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH1cclxuXHRcclxuXHRzdGF0aWMgZ2V0KG9iamVjdDphbnksIHBhdGg6c3RyaW5nKTogYW55IHtcclxuXHRcdHBhdGguc3BsaXQoJy4nKVxyXG5cdFx0LmZvckVhY2gocGFydCA9PiB7XHJcblx0XHRcdG9iamVjdCA9IG9iamVjdCAmJiBvYmplY3RbcGFydF1cclxuXHRcdH0pXHJcblx0XHRcclxuXHRcdHJldHVybiBvYmplY3Q7XHJcblx0fVxyXG5cdFxyXG5cdHN0YXRpYyBzZXQob2JqZWN0OmFueSwgcGF0aDpzdHJpbmcsIHZhbHVlOmFueSk6IHZvaWQge1xyXG5cdFx0bGV0IHBhcnRzID0gcGF0aC5zcGxpdCgnLicpO1xyXG5cdFx0bGV0IGtleSA9IHBhcnRzLnBvcCgpO1xyXG5cdFx0XHJcblx0XHRwYXJ0cy5mb3JFYWNoKHBhcnQgPT4ge1xyXG5cdFx0XHRvYmplY3QgPSBvYmplY3RbcGFydF1cclxuXHRcdH0pXHJcblx0XHRcclxuXHRcdG9iamVjdFtrZXldID0gdmFsdWU7XHJcblx0fVxyXG5cdFxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9