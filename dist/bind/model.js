define(["require", "exports"], function (require, exports) {
    var Model = (function () {
        function Model(objects) {
            this._objects = objects;
        }
        Object.defineProperty(Model.prototype, "objects", {
            get: function () {
                return this._objects;
            },
            enumerable: true,
            configurable: true
        });
        Model.prototype.get = function (path) {
            var ret = { object: void 0, value: void 0 };
            this.objects.some(function (obj) {
                if (Model.has(obj, path)) {
                    ret = {
                        object: obj,
                        value: Model.get(obj, path)
                    };
                    return true;
                }
            });
            return ret;
        };
        Model.prototype.set = function (path, value) {
            this.objects.forEach(function (obj) {
                if (Model.has(obj, path)) {
                    return Model.set(obj, path, value);
                }
            });
        };
        Model.prototype.findObject = function (path) {
            var ret = void 0;
            this.objects.forEach(function (obj) {
                if (!!Model.has(obj, path))
                    return ret = obj;
            });
            return ret;
        };
        Model.has = function (object, path) {
            var ret = true;
            path.split('.')
                .forEach(function (part, index, parts) {
                if (typeof object[part] === 'undefined' && index + 1 < parts.length)
                    return ret = false;
                else {
                    object = object[part];
                }
            });
            return ret;
        };
        Model.get = function (object, path) {
            path.split('.')
                .forEach(function (part) {
                object = object && object[part];
            });
            return object;
        };
        Model.set = function (object, path, value) {
            var parts = path.split('.');
            var key = parts.pop();
            parts.forEach(function (part) {
                object = object[part];
            });
            object[key] = value;
        };
        return Model;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Model;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpbmQvbW9kZWwudHMiXSwibmFtZXMiOlsiTW9kZWwiLCJNb2RlbC5jb25zdHJ1Y3RvciIsIk1vZGVsLm9iamVjdHMiLCJNb2RlbC5nZXQiLCJNb2RlbC5zZXQiLCJNb2RlbC5maW5kT2JqZWN0IiwiTW9kZWwuaGFzIl0sIm1hcHBpbmdzIjoiO0lBRUE7UUFJQ0EsZUFBWUEsT0FBa0JBO1lBQzdCQyxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxPQUFPQSxDQUFDQTtRQUN6QkEsQ0FBQ0E7UUFFREQsc0JBQUlBLDBCQUFPQTtpQkFBWEE7Z0JBQ0NFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO1lBQ3RCQSxDQUFDQTs7O1dBQUFGO1FBRU1BLG1CQUFHQSxHQUFWQSxVQUFXQSxJQUFXQTtZQUNyQkcsSUFBSUEsR0FBR0EsR0FBbUJBLEVBQUNBLE1BQU1BLEVBQUVBLEtBQUtBLENBQUNBLEVBQUVBLEtBQUtBLEVBQUVBLEtBQUtBLENBQUNBLEVBQUNBLENBQUNBO1lBRTFEQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFBQSxHQUFHQTtnQkFDcEJBLEVBQUVBLENBQUFBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO29CQUN6QkEsR0FBR0EsR0FBR0E7d0JBQ0xBLE1BQU1BLEVBQUVBLEdBQUdBO3dCQUNYQSxLQUFLQSxFQUFFQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFDQSxJQUFJQSxDQUFDQTtxQkFDMUJBLENBQUFBO29CQUNEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtnQkFDYkEsQ0FBQ0E7WUFDRkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7WUFFRkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDWkEsQ0FBQ0E7UUFFTUgsbUJBQUdBLEdBQVZBLFVBQVdBLElBQVdBLEVBQUVBLEtBQVNBO1lBQ2hDSSxJQUFJ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bXBvcnQge09iamVjdEFuZFZhbHVlfSBmcm9tIFwiLi4vdXRpbC90eXBlc1wiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RlbCB7XHJcblx0XHJcblx0cHJvdGVjdGVkIF9vYmplY3RzOkFycmF5PGFueT47XHJcblx0XHJcblx0Y29uc3RydWN0b3Iob2JqZWN0czpBcnJheTxhbnk+KSB7XHJcblx0XHR0aGlzLl9vYmplY3RzID0gb2JqZWN0cztcclxuXHR9XHJcblx0XHJcblx0Z2V0IG9iamVjdHMoKTogQXJyYXk8YW55PiB7XHJcblx0XHRyZXR1cm4gdGhpcy5fb2JqZWN0cztcclxuXHR9XHJcblx0XHJcblx0cHVibGljIGdldChwYXRoOnN0cmluZyk6IE9iamVjdEFuZFZhbHVlIHtcclxuXHRcdGxldCByZXQ6IE9iamVjdEFuZFZhbHVlID0ge29iamVjdDogdm9pZCAwLCB2YWx1ZTogdm9pZCAwfTtcclxuXHRcdFxyXG5cdFx0dGhpcy5vYmplY3RzLnNvbWUob2JqID0+IHtcclxuXHRcdFx0aWYoTW9kZWwuaGFzKG9iaiwgcGF0aCkpIHtcclxuXHRcdFx0XHRyZXQgPSB7XHJcblx0XHRcdFx0XHRvYmplY3Q6IG9iaixcclxuXHRcdFx0XHRcdHZhbHVlOiBNb2RlbC5nZXQob2JqLHBhdGgpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgc2V0KHBhdGg6c3RyaW5nLCB2YWx1ZTphbnkpOiB2b2lkIHtcclxuXHRcdHRoaXMub2JqZWN0cy5mb3JFYWNoKG9iaiA9PiB7XHJcblx0XHRcdGlmKE1vZGVsLmhhcyhvYmosIHBhdGgpKSB7XHJcblx0XHRcdFx0cmV0dXJuIE1vZGVsLnNldChvYmosIHBhdGgsIHZhbHVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHR9XHJcblx0XHJcblx0cHVibGljIGZpbmRPYmplY3QocGF0aDpzdHJpbmcpOiBhbnkge1xyXG5cdFx0bGV0IHJldCA9IHZvaWQgMDtcclxuXHRcdHRoaXMub2JqZWN0cy5mb3JFYWNoKG9iaiA9PiB7XHJcblx0XHRcdGlmKCEhTW9kZWwuaGFzKG9iaiwgcGF0aCkpXHJcblx0XHRcdFx0cmV0dXJuIHJldCA9IG9iajtcclxuXHRcdH0pXHJcblx0XHRcclxuXHRcdHJldHVybiByZXQ7XHJcblx0fVxyXG5cdFxyXG5cdHN0YXRpYyBoYXMob2JqZWN0OmFueSwgcGF0aDpzdHJpbmcpOiBib29sZWFuIHtcclxuXHRcdGxldCByZXQgPSB0cnVlO1xyXG5cdFx0XHJcblx0XHRwYXRoLnNwbGl0KCcuJylcclxuXHRcdC5mb3JFYWNoKChwYXJ0LCBpbmRleCwgcGFydHMpID0+IHtcclxuXHRcdFx0aWYodHlwZW9mIG9iamVjdFtwYXJ0XSA9PT0gJ3VuZGVmaW5lZCcgJiYgaW5kZXgrMSA8IHBhcnRzLmxlbmd0aClcclxuXHRcdFx0XHRyZXR1cm4gcmV0ID0gZmFsc2U7XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdG9iamVjdCA9IG9iamVjdFtwYXJ0XVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH1cclxuXHRcclxuXHRzdGF0aWMgZ2V0KG9iamVjdDphbnksIHBhdGg6c3RyaW5nKTogYW55IHtcclxuXHRcdHBhdGguc3BsaXQoJy4nKVxyXG5cdFx0LmZvckVhY2gocGFydCA9PiB7XHJcblx0XHRcdG9iamVjdCA9IG9iamVjdCAmJiBvYmplY3RbcGFydF1cclxuXHRcdH0pXHJcblx0XHRcclxuXHRcdHJldHVybiBvYmplY3Q7XHJcblx0fVxyXG5cdFxyXG5cdHN0YXRpYyBzZXQob2JqZWN0OmFueSwgcGF0aDpzdHJpbmcsIHZhbHVlOmFueSk6IHZvaWQge1xyXG5cdFx0bGV0IHBhcnRzID0gcGF0aC5zcGxpdCgnLicpO1xyXG5cdFx0bGV0IGtleSA9IHBhcnRzLnBvcCgpO1xyXG5cdFx0XHJcblx0XHRwYXJ0cy5mb3JFYWNoKHBhcnQgPT4ge1xyXG5cdFx0XHRvYmplY3QgPSBvYmplY3RbcGFydF1cclxuXHRcdH0pXHJcblx0XHRcclxuXHRcdG9iamVjdFtrZXldID0gdmFsdWU7XHJcblx0fVxyXG5cdFxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9