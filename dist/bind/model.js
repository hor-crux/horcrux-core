define(["require", "exports"], function (require, exports) {
    var Model = (function () {
        function Model(objects) {
            this.objects = objects;
        }
        Model.prototype.get = function (path) {
            var ret = void 0;
            this.objects.forEach(function (obj) {
                if (Model.has(obj, path))
                    return ret = {
                        object: obj,
                        value: Model.get(obj, path)
                    };
            });
            return ret;
        };
        Model.prototype.set = function (path, value) {
            this.objects.forEach(function (obj) {
                if (Model.has(obj, path)) {
                    return Model.set(obj, path, value);
                }
            });
        };
        Model.prototype.findObject = function (path) {
            var ret = void 0;
            this.objects.forEach(function (obj) {
                if (!!Model.has(obj, path))
                    return ret = obj;
            });
            return ret;
        };
        Model.has = function (object, path) {
            var ret = true;
            path.split('.')
                .forEach(function (part, index, parts) {
                if (typeof object[part] === 'undefined' && index + 1 < parts.length)
                    return ret = false;
                else {
                    object = object[part];
                }
            });
            return ret;
        };
        Model.get = function (object, path) {
            path.split('.')
                .forEach(function (part) {
                object = object[part];
            });
            return object;
        };
        Model.set = function (object, path, value) {
            var parts = path.split('.');
            var key = parts.pop();
            parts.forEach(function (part) {
                object = object[part];
            });
            object[key] = value;
        };
        return Model;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Model;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpbmQvbW9kZWwudHMiXSwibmFtZXMiOlsiTW9kZWwiLCJNb2RlbC5jb25zdHJ1Y3RvciIsIk1vZGVsLmdldCIsIk1vZGVsLnNldCIsIk1vZGVsLmZpbmRPYmplY3QiLCJNb2RlbC5oYXMiXSwibWFwcGluZ3MiOiI7SUFFQTtRQUlDQSxlQUFZQSxPQUFrQkE7WUFDN0JDLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLE9BQU9BLENBQUNBO1FBQ3hCQSxDQUFDQTtRQUVNRCxtQkFBR0EsR0FBVkEsVUFBV0EsSUFBV0E7WUFDckJFLElBQUlBLEdBQUdBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBO1lBRWpCQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFBQSxHQUFHQTtnQkFDdkJBLEVBQUVBLENBQUFBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO29CQUN2QkEsTUFBTUEsQ0FBQ0EsR0FBR0EsR0FBR0E7d0JBQ1pBLE1BQU1BLEVBQUVBLEdBQUdBO3dCQUNYQSxLQUFLQSxFQUFFQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFDQSxJQUFJQSxDQUFDQTtxQkFDMUJBLENBQUFBO1lBQ0hBLENBQUNBLENBQUNBLENBQUFBO1lBRUZBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ1pBLENBQUNBO1FBRU1GLG1CQUFHQSxHQUFWQSxVQUFXQSxJQUFXQSxFQUFFQSxLQUFTQTtZQUNoQ0csSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQUEsR0FBR0E7Z0JBQ3ZCQSxFQUFFQSxDQUFBQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDekJBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEVBQUVBLElBQUlBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO2dCQUNwQ0EsQ0FBQ0E7WUFDRkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDSEEsQ0FBQ0E7UUFFTUgsMEJBQVVBLEdBQWpCQSxVQUFrQkEsSUFBV0E7WUFDNUJJLElBQUlBLEdBQUdBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBO1lBQ2pCQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFBQSxHQUFHQTtnQkFDdkJBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO29CQUN6QkEsTUFBTUEsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDbkJBLENBQUNBLENBQUNBLENBQUFBO1lBRUZBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ1pBLENBQUNBO1FBRU1KLFNBQUdBLEdBQVZBLFVBQVdBLE1BQVVBLEVBQUVBLElBQVdBO1lBQ2pDSyxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUVmQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQTtpQkFDZEEsT0FBT0EsQ0FBQ0EsVUFBQ0EsSUFBSUEsRUFBRUEsS0FBS0EsRUFBRUEsS0FBS0E7Z0JBQzNCQSxFQUFFQSxDQUFBQSxDQUFDQSxPQUFPQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxXQUFXQSxJQUFJQSxLQUFLQSxHQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQTtvQkFDaEVBLE1BQU1BLENBQUNBLEdBQUdBLEdBQUdBLEtBQUtBLENBQUNBO2dCQUNwQkEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ0xBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUFBO2dCQUN0QkEsQ0FBQ0E7WUFDRkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7WUFFRkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDWkEsQ0FBQ0E7UUFFTUwsU0FBR0EsR0FBVkEsVUFBV0EsTUFBVUEsRUFBRUEsSUFBV0E7WUFDakNFLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBO2lCQUNkQSxPQUFPQSxDQUFDQSxVQUFBQSxJQUFJQTtnQkFDWkEsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQUE7WUFDdEJBLENBQUNBLENBQUNBLENBQUFBO1lBRUZBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO1FBQ2ZBLENBQUNBO1FBRU1GLFNBQUdBLEdBQVZBLFVBQVdBLE1BQVVBLEVBQUVBLElBQVdBLEVBQUVBLEtBQVNBO1lBQzVDRyxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM1QkEsSUFBSUEsR0FBR0EsR0FBR0EsS0FBS0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFFdEJBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLFVBQUFBLElBQUlBO2dCQUNqQkEsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQUE7WUFDdEJBLENBQUNBLENBQUNBLENBQUFBO1lBRUZBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBO1FBQ3JCQSxDQUFDQTtRQUVGSCxZQUFDQTtJQUFEQSxDQTNFQSxBQTJFQ0EsSUFBQTtJQTNFRDsyQkEyRUMsQ0FBQSIsImZpbGUiOiJiaW5kL21vZGVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPYmplY3RBbmRWYWx1ZX0gZnJvbSBcIi4uL3V0aWwvdHlwZXNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RlbCB7XG5cdFxuXHRwcm90ZWN0ZWQgb2JqZWN0czpBcnJheTxhbnk+O1xuXHRcblx0Y29uc3RydWN0b3Iob2JqZWN0czpBcnJheTxhbnk+KSB7XG5cdFx0dGhpcy5vYmplY3RzID0gb2JqZWN0cztcblx0fVxuXHRcblx0cHVibGljIGdldChwYXRoOnN0cmluZyk6IE9iamVjdEFuZFZhbHVlIHtcblx0XHRsZXQgcmV0ID0gdm9pZCAwO1xuXHRcdFxuXHRcdHRoaXMub2JqZWN0cy5mb3JFYWNoKG9iaiA9PiB7XG5cdFx0XHRpZihNb2RlbC5oYXMob2JqLCBwYXRoKSlcblx0XHRcdFx0cmV0dXJuIHJldCA9IHtcblx0XHRcdFx0XHRvYmplY3Q6IG9iaixcblx0XHRcdFx0XHR2YWx1ZTogTW9kZWwuZ2V0KG9iaixwYXRoKVxuXHRcdFx0XHR9XG5cdFx0fSlcblx0XHRcblx0XHRyZXR1cm4gcmV0O1xuXHR9XG5cdFxuXHRwdWJsaWMgc2V0KHBhdGg6c3RyaW5nLCB2YWx1ZTphbnkpOiB2b2lkIHtcblx0XHR0aGlzLm9iamVjdHMuZm9yRWFjaChvYmogPT4ge1xuXHRcdFx0aWYoTW9kZWwuaGFzKG9iaiwgcGF0aCkpIHtcblx0XHRcdFx0cmV0dXJuIE1vZGVsLnNldChvYmosIHBhdGgsIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9KVxuXHR9XG5cdFxuXHRwdWJsaWMgZmluZE9iamVjdChwYXRoOnN0cmluZyk6IGFueSB7XG5cdFx0bGV0IHJldCA9IHZvaWQgMDtcblx0XHR0aGlzLm9iamVjdHMuZm9yRWFjaChvYmogPT4ge1xuXHRcdFx0aWYoISFNb2RlbC5oYXMob2JqLCBwYXRoKSlcblx0XHRcdFx0cmV0dXJuIHJldCA9IG9iajtcblx0XHR9KVxuXHRcdFxuXHRcdHJldHVybiByZXQ7XG5cdH1cblx0XG5cdHN0YXRpYyBoYXMob2JqZWN0OmFueSwgcGF0aDpzdHJpbmcpOiBhbnkge1xuXHRcdGxldCByZXQgPSB0cnVlO1xuXHRcdFxuXHRcdHBhdGguc3BsaXQoJy4nKVxuXHRcdC5mb3JFYWNoKChwYXJ0LCBpbmRleCwgcGFydHMpID0+IHtcblx0XHRcdGlmKHR5cGVvZiBvYmplY3RbcGFydF0gPT09ICd1bmRlZmluZWQnICYmIGluZGV4KzEgPCBwYXJ0cy5sZW5ndGgpXG5cdFx0XHRcdHJldHVybiByZXQgPSBmYWxzZTtcblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRvYmplY3QgPSBvYmplY3RbcGFydF1cblx0XHRcdH1cblx0XHR9KVxuXHRcdFxuXHRcdHJldHVybiByZXQ7XG5cdH1cblx0XG5cdHN0YXRpYyBnZXQob2JqZWN0OmFueSwgcGF0aDpzdHJpbmcpOiBhbnkge1xuXHRcdHBhdGguc3BsaXQoJy4nKVxuXHRcdC5mb3JFYWNoKHBhcnQgPT4ge1xuXHRcdFx0b2JqZWN0ID0gb2JqZWN0W3BhcnRdXG5cdFx0fSlcblx0XHRcblx0XHRyZXR1cm4gb2JqZWN0O1xuXHR9XG5cdFxuXHRzdGF0aWMgc2V0KG9iamVjdDphbnksIHBhdGg6c3RyaW5nLCB2YWx1ZTphbnkpOiB2b2lkIHtcblx0XHRsZXQgcGFydHMgPSBwYXRoLnNwbGl0KCcuJyk7XG5cdFx0bGV0IGtleSA9IHBhcnRzLnBvcCgpO1xuXHRcdFxuXHRcdHBhcnRzLmZvckVhY2gocGFydCA9PiB7XG5cdFx0XHRvYmplY3QgPSBvYmplY3RbcGFydF1cblx0XHR9KVxuXHRcdFxuXHRcdG9iamVjdFtrZXldID0gdmFsdWU7XG5cdH1cblx0XG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
