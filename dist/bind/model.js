define(["require", "exports"], function (require, exports) {
    var Model = (function () {
        function Model(objects) {
            this.objects = objects;
        }
        Model.prototype.get = function (path) {
            var ret = { object: void 0, value: void 0 };
            this.objects.some(function (obj) {
                if (Model.has(obj, path)) {
                    ret = {
                        object: obj,
                        value: Model.get(obj, path)
                    };
                    return true;
                }
            });
            return ret;
        };
        Model.prototype.set = function (path, value) {
            this.objects.forEach(function (obj) {
                if (Model.has(obj, path)) {
                    return Model.set(obj, path, value);
                }
            });
        };
        Model.prototype.findObject = function (path) {
            var ret = void 0;
            this.objects.forEach(function (obj) {
                if (!!Model.has(obj, path))
                    return ret = obj;
            });
            return ret;
        };
        Model.has = function (object, path) {
            var ret = true;
            path.split('.')
                .forEach(function (part, index, parts) {
                if (typeof object[part] === 'undefined' && index + 1 < parts.length)
                    return ret = false;
                else {
                    object = object[part];
                }
            });
            return ret;
        };
        Model.get = function (object, path) {
            path.split('.')
                .forEach(function (part) {
                object = object && object[part];
            });
            return object;
        };
        Model.set = function (object, path, value) {
            var parts = path.split('.');
            var key = parts.pop();
            parts.forEach(function (part) {
                object = object[part];
            });
            object[key] = value;
        };
        return Model;
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Model;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpbmQvbW9kZWwudHMiXSwibmFtZXMiOlsiTW9kZWwiLCJNb2RlbC5jb25zdHJ1Y3RvciIsIk1vZGVsLmdldCIsIk1vZGVsLnNldCIsIk1vZGVsLmZpbmRPYmplY3QiLCJNb2RlbC5oYXMiXSwibWFwcGluZ3MiOiI7SUFFQTtRQUlDQSxlQUFZQSxPQUFrQkE7WUFDN0JDLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLE9BQU9BLENBQUNBO1FBQ3hCQSxDQUFDQTtRQUVNRCxtQkFBR0EsR0FBVkEsVUFBV0EsSUFBV0E7WUFDckJFLElBQUlBLEdBQUdBLEdBQW1CQSxFQUFDQSxNQUFNQSxFQUFFQSxLQUFLQSxDQUFDQSxFQUFFQSxLQUFLQSxFQUFFQSxLQUFLQSxDQUFDQSxFQUFDQSxDQUFDQTtZQUUxREEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBQUEsR0FBR0E7Z0JBQ3BCQSxFQUFFQSxDQUFBQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDekJBLEdBQUdBLEdBQUdBO3dCQUNMQSxNQUFNQSxFQUFFQSxHQUFHQTt3QkFDWEEsS0FBS0EsRUFBRUEsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsRUFBQ0EsSUFBSUEsQ0FBQ0E7cUJBQzFCQSxDQUFBQTtvQkFDREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7Z0JBQ2JBLENBQUNBO1lBQ0ZBLENBQUNBLENBQUNBLENBQUFBO1lBRUZBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ1pBLENBQUNBO1FBRU1GLG1CQUFHQSxHQUFWQSxVQUFXQSxJQUFXQSxFQUFFQSxLQUFTQTtZQUNoQ0csSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQUEsR0FBR0E7Z0JBQ3ZCQSxFQUFFQSxDQUFBQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDekJBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEVBQUVBLElBQUlBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO2dCQUNwQ0EsQ0FBQ0E7WUFDRkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDSEEsQ0FBQ0E7UUFFTUgsMEJBQVVBLEdBQWpCQSxVQUFrQkEsSUFBV0E7WUFDNUJJLElBQUlBLEdBQUdBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBO1lBQ2pCQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFBQSxHQUFHQTtnQkFDdkJBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO29CQUN6QkEsTUFBTUEsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDbkJBLENBQUNBLENBQUNBLENBQUFBO1lBRUZBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ1pBLENBQUNBO1FBRU1KLFNBQUdBLEdBQVZBLFVBQVdBLE1BQVVBLEVBQUVBLElBQVdBO1lBQ2pDSyxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUVmQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQTtpQkFDZEEsT0FBT0EsQ0FBQ0EsVUFBQ0EsSUFBSUEsRUFBRUEsS0FBS0EsRUFBRUEsS0FBS0E7Z0JBQzNCQSxFQUFFQSxDQUFBQSxDQUFDQSxPQUFPQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxXQUFXQSxJQUFJQSxLQUFLQSxHQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQTtvQkFDaEVBLE1BQU1BLENBQUNBLEdBQUdBLEdBQUdBLEtBQUtBLENBQUNBO2dCQUNwQkEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ0xBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUFBO2dCQUN0QkEsQ0FBQ0E7WUFDRkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7WUFFRkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7UUFDWkEsQ0FBQ0E7UUFFTUwsU0FBR0EsR0FBVkEsVUFBV0EsTUFBVUEsRUFBRUEsSUFBV0E7WUFDakNFLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBO2lCQUNkQSxPQUFPQSxDQUFDQSxVQUFBQSxJQUFJQTtnQkFDWkEsTUFBTUEsR0FBR0EsTUFBTUEsSUFBSUEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQUE7WUFDaENBLENBQUNBLENBQUNBLENBQUFBO1lBRUZBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO1FBQ2ZBLENBQUNBO1FBRU1GLFNBQUdBLEdBQVZBLFVBQVdBLE1BQVVBLEVBQUVBLElBQVdBLEVBQUVBLEtBQVNBO1lBQzVDRyxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM1QkEsSUFBSUEsR0FBR0EsR0FBR0EsS0FBS0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFFdEJBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLFVBQUFBLElBQUlBO2dCQUNqQkEsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQUE7WUFDdEJBLENBQUNBLENBQUNBLENBQUFBO1lBRUZBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBO1FBQ3JCQSxDQUFDQTtRQUVGSCxZQUFDQTtJQUFEQSxDQTdFQSxBQTZFQ0EsSUFBQTtJQTdFRDsyQkE2RUMsQ0FBQSIsImZpbGUiOiJiaW5kL21vZGVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPYmplY3RBbmRWYWx1ZX0gZnJvbSBcIi4uL3V0aWwvdHlwZXNcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kZWwge1xyXG5cdFxyXG5cdHByb3RlY3RlZCBvYmplY3RzOkFycmF5PGFueT47XHJcblx0XHJcblx0Y29uc3RydWN0b3Iob2JqZWN0czpBcnJheTxhbnk+KSB7XHJcblx0XHR0aGlzLm9iamVjdHMgPSBvYmplY3RzO1xyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgZ2V0KHBhdGg6c3RyaW5nKTogT2JqZWN0QW5kVmFsdWUge1xyXG5cdFx0bGV0IHJldDogT2JqZWN0QW5kVmFsdWUgPSB7b2JqZWN0OiB2b2lkIDAsIHZhbHVlOiB2b2lkIDB9O1xyXG5cdFx0XHJcblx0XHR0aGlzLm9iamVjdHMuc29tZShvYmogPT4ge1xyXG5cdFx0XHRpZihNb2RlbC5oYXMob2JqLCBwYXRoKSkge1xyXG5cdFx0XHRcdHJldCA9IHtcclxuXHRcdFx0XHRcdG9iamVjdDogb2JqLFxyXG5cdFx0XHRcdFx0dmFsdWU6IE1vZGVsLmdldChvYmoscGF0aClcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0XHRcclxuXHRcdHJldHVybiByZXQ7XHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyBzZXQocGF0aDpzdHJpbmcsIHZhbHVlOmFueSk6IHZvaWQge1xyXG5cdFx0dGhpcy5vYmplY3RzLmZvckVhY2gob2JqID0+IHtcclxuXHRcdFx0aWYoTW9kZWwuaGFzKG9iaiwgcGF0aCkpIHtcclxuXHRcdFx0XHRyZXR1cm4gTW9kZWwuc2V0KG9iaiwgcGF0aCwgdmFsdWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgZmluZE9iamVjdChwYXRoOnN0cmluZyk6IGFueSB7XHJcblx0XHRsZXQgcmV0ID0gdm9pZCAwO1xyXG5cdFx0dGhpcy5vYmplY3RzLmZvckVhY2gob2JqID0+IHtcclxuXHRcdFx0aWYoISFNb2RlbC5oYXMob2JqLCBwYXRoKSlcclxuXHRcdFx0XHRyZXR1cm4gcmV0ID0gb2JqO1xyXG5cdFx0fSlcclxuXHRcdFxyXG5cdFx0cmV0dXJuIHJldDtcclxuXHR9XHJcblx0XHJcblx0c3RhdGljIGhhcyhvYmplY3Q6YW55LCBwYXRoOnN0cmluZyk6IGJvb2xlYW4ge1xyXG5cdFx0bGV0IHJldCA9IHRydWU7XHJcblx0XHRcclxuXHRcdHBhdGguc3BsaXQoJy4nKVxyXG5cdFx0LmZvckVhY2goKHBhcnQsIGluZGV4LCBwYXJ0cykgPT4ge1xyXG5cdFx0XHRpZih0eXBlb2Ygb2JqZWN0W3BhcnRdID09PSAndW5kZWZpbmVkJyAmJiBpbmRleCsxIDwgcGFydHMubGVuZ3RoKVxyXG5cdFx0XHRcdHJldHVybiByZXQgPSBmYWxzZTtcclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0b2JqZWN0ID0gb2JqZWN0W3BhcnRdXHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0XHRcclxuXHRcdHJldHVybiByZXQ7XHJcblx0fVxyXG5cdFxyXG5cdHN0YXRpYyBnZXQob2JqZWN0OmFueSwgcGF0aDpzdHJpbmcpOiBhbnkge1xyXG5cdFx0cGF0aC5zcGxpdCgnLicpXHJcblx0XHQuZm9yRWFjaChwYXJ0ID0+IHtcclxuXHRcdFx0b2JqZWN0ID0gb2JqZWN0ICYmIG9iamVjdFtwYXJ0XVxyXG5cdFx0fSlcclxuXHRcdFxyXG5cdFx0cmV0dXJuIG9iamVjdDtcclxuXHR9XHJcblx0XHJcblx0c3RhdGljIHNldChvYmplY3Q6YW55LCBwYXRoOnN0cmluZywgdmFsdWU6YW55KTogdm9pZCB7XHJcblx0XHRsZXQgcGFydHMgPSBwYXRoLnNwbGl0KCcuJyk7XHJcblx0XHRsZXQga2V5ID0gcGFydHMucG9wKCk7XHJcblx0XHRcclxuXHRcdHBhcnRzLmZvckVhY2gocGFydCA9PiB7XHJcblx0XHRcdG9iamVjdCA9IG9iamVjdFtwYXJ0XVxyXG5cdFx0fSlcclxuXHRcdFxyXG5cdFx0b2JqZWN0W2tleV0gPSB2YWx1ZTtcclxuXHR9XHJcblx0XHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=