define(["require", "exports", "./bind", "../attribute/attribute"], function (require, exports, bind_1, attribute_1) {
    function bindAttribute(node, attr, model) {
        bind_1.regex.lastIndex = 0;
        var match = bind_1.regex.exec(attr.value);
        if (match) {
            var path = match[1];
            if (attribute_1.Attributes[attr.name.toLowerCase()] !== undefined) {
                return bindCustomAttribute(node, attr, model, path);
            }
            else if (!!/\(.*\)/.exec(attr.value)) {
                bindFunctionWithParamAttribute(node, attr, model, path);
            }
            else if (typeof model.get(path) === "function") {
                bindFunctionAttribute(node, attr, model, path);
            }
            else {
                bindTextAttribute(node, attr, model, path);
            }
        }
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = bindAttribute;
    function bindTextAttribute(node, attr, model, path) {
        var originalValue = attr.value;
        var _a = model.get(path), object = _a.object, value = _a.value;
        var observer = new PathObserver(object, path);
        var r = new RegExp("\{\{" + path + "\}\}", "g");
        var cb = function (newVal, oldVal) {
            attr.value = originalValue.replace(r, newVal);
        };
        observer.open(cb);
        cb(value, null);
    }
    var regex_params = /\((.+)\)/;
    var regex_function = /.*\(/;
    function bindFunctionWithParamAttribute(node, attr, model, path) {
        regex_params.lastIndex = 0;
        regex_function.lastIndex = 0;
        var params = regex_params.exec(path)[1]
            .split(",")
            .map(function (param) { return param.trim(); })
            .map(function (param) { return model.get(param).value; });
        var functionName = regex_function.exec(path)[1];
        var _a = model.get(path), object = _a.object, value = _a.value;
        node[attr.name.toLocaleLowerCase()] = function (event) {
            value.apply(object, params);
        };
    }
    function bindFunctionAttribute(node, attr, model, path) {
        var _a = model.get(path), object = _a.object, value = _a.value;
        node[attr.name.toLocaleLowerCase()] = function (event) {
            value.call(object, event);
        };
    }
    function bindCustomAttribute(node, attr, model, path) {
        var customAttr = new attribute_1.Attributes[attr.name](node, attr, model, path);
        var _a = model.get(path), object = _a.object, value = _a.value;
        var observer = new PathObserver(object, path);
        var cb = function (newVal, oldVal) {
            customAttr.newJSValue(newVal);
        };
        observer.open(cb);
        cb(value, null);
    }
});

//# sourceMappingURL=data:application/json;base64,