define(["require", "exports", "./bind", "../attribute/attribute", "observejs"], function (require, exports, bind_1, attribute_1, observejs_1) {
    function bindAttribute(node, attr, model) {
        //TODO use Bindings
        //TODO also detect CustomAttribute with non-{{}} Values
        //TODO call Alternative if {{.*}} does not match: setProperty
        if (attribute_1.Attributes[attr.name.toLowerCase()] !== undefined) {
            return bindCustomAttribute(node, attr, model);
        }
        bind_1.regex.lastIndex = 0;
        var match = bind_1.regex.exec(attr.value);
        if (match) {
            var path = match[1];
            if (!!/\(.*\)/.exec(attr.value)) {
                bindFunctionWithParamAttribute(node, attr, model, path);
            }
            else if (typeof model.get(path).value === "function") {
                bindFunctionAttribute(node, attr, model, path);
            }
            else if (!!attr.ownerElement.properties && attr.ownerElement.properties.indexOf(attr.name) > -1) {
                bindProperty(node, attr, model, path);
            }
            else {
                bindTextAttribute(node, attr, model, path);
            }
        }
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = bindAttribute;
    function bindTextAttribute(node, attr, model, path) {
        var originalValue = attr.value;
        var _a = model.get(path), object = _a.object, value = _a.value;
        var observer = new observejs_1.PathObserver(object, path);
        var r = new RegExp("\{\{" + path + "\}\}", "g");
        var cb = function (newVal, oldVal) {
            attr.value = originalValue.replace(r, newVal);
        };
        observer.open(cb);
        cb(value, null);
    }
    function bindProperty(node, attr, model, path) {
        (function (node, attr, model, path) {
            var _a = model.get(path), object = _a.object, value = _a.value;
            var observer = new observejs_1.PathObserver(object, path);
            var cb = function (newVal, oldVal) {
                node[attr.name.substr(1)] = newVal;
            };
            observer.open(cb);
            cb(value, null);
            attr.ownerElement.removeAttribute(attr.name);
        })(node, attr, model, path);
    }
    var regex_params = /\((.+)\)/;
    var regex_function = /(.*)\(/;
    function bindFunctionWithParamAttribute(node, attr, model, path) {
        regex_params.lastIndex = 0;
        regex_function.lastIndex = 0;
        var params = regex_params.exec(path)[1]
            .split(",")
            .map(function (param) { return param.trim(); })
            .map(function (param) {
            var value = model.get(param).value;
            return typeof value === "undefined" ? param : value;
        });
        //TODO map params to types e.g. 'true' to boolean, 1.2 to number...
        var functionName = regex_function.exec(path)[1];
        var _a = model.get(functionName), object = _a.object, value = _a.value;
        attr.ownerElement.removeAttribute(attr.name);
        node[attr.name.toLocaleLowerCase()] = function (event) {
            value.apply(object, params);
        };
    }
    function bindFunctionAttribute(node, attr, model, path) {
        var _a = model.get(path), object = _a.object, value = _a.value;
        attr.ownerElement.removeAttribute(attr.name);
        node[attr.name.toLocaleLowerCase()] = function (event) {
            value.call(object, event);
        };
    }
    function bindCustomAttribute(node, attr, model) {
        var customAttr = new attribute_1.Attributes[attr.name](node, attr, model);
        /*
        let {object, value} = model.get(path);
        
        let observer = new PathObserver(object, path);
        let cb = (newVal, oldVal) => {
            customAttr.newJSValue(newVal);
        };
        observer.open(cb);
        cb(value, null);
        */
    }
});

//# sourceMappingURL=data:application/json;base64,